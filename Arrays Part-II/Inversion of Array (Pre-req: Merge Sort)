#include <bits/stdc++.h> 
    long long merge(long long *arr,long long low,long long mid,long long high){
        vector<long long>temp;
        int left = low;
        int right = mid+1;
        long long count = 0;
        
        while(left <= mid && right <= high){
            // left is smaller
            if(arr[left] <= arr[right]){
                temp.push_back(arr[left]);
                left++;
            }
            // right is smaller
            else{
                temp.push_back(arr[right]);
                count += (mid-left+1);
                right++;
            }
        }
        while(left <= mid){
            temp.push_back(arr[left]);
            left++;
        }
        while(right <= high){
            temp.push_back(arr[right]);
            right++;
        }
        
        for(int i=low;i<=high;i++){
            arr[i] = temp[i-low];
        }
        return count;
    }
    long long mergeSort(long long *arr,long long low,long long high){
        long long count = 0;
        if(low >= high) return count;
        long long mid = low + (high-low)/2;
        count += mergeSort(arr,low,mid);
        count += mergeSort(arr,mid+1,high);
        count += merge(arr,low,mid,high);
        return count;
    }
long long getInversions(long long *arr, int n){
    return mergeSort(arr,0,n-1);
}
